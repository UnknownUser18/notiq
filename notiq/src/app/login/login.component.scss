@use 'index' as i;

:host {
  @include i.flex(column, center, center);
  min-width: 100%;

  > div {
    @include i.flex($justify: space-between, $gap: i.$margin-xl);
    position: relative;
    overflow: hidden;
    align-items: unset;
    border: i.$base-border var(--border-muted);
    border-radius: i.$border-radius-xl;
    box-shadow: i.$shadow-xl;
    @include i.background(var(--bg), (45deg, var(--bg) 20%, var(--bg-light)));
  }
}


div > hgroup {
  @include i.flex(column, center, end, i.$margin-3xs);
  padding: i.$padding-sm;
  border: i.$base-border transparent;
  border-radius: i.$border-radius-lg;
  background-color: var(--bg-light);
  transition: i.transition(background-color, i.$duration-md);
  text-align: end;

  &.success {
    background-color: color-mix(in oklch, var(--success) 35%, var(--bg-light) 10%);
  }

  &.error {
    background-color: color-mix(in oklch, var(--danger) 35%, var(--bg-light) 10%);
  }
}

form {
  @include i.flex(column, $gap: i.$margin-lg);
  margin: auto;
  padding: i.$padding-lg;
}


h1 {
  font-size: i.$font-size-2xl;
}

h2 {
  @include i.flex(row, space-between, center, i.$margin-2xs);
}

p {
  margin-bottom: i.$margin-lg;
  font-size: i.$font-size-xs;
  color: var(--text-muted);
}

label {
  @include i.flex(column, $gap: i.$margin-2xs);
  width: 100%;

  &:last-of-type {
    @include i.flex(row, start, center);
    cursor: pointer;
  }

  &:focus-within span:not(.error) {
    color: var(--text);
  }

  .error {
    font-size: i.$font-size-xs;
    font-weight: 500;
    color: var(--danger);
  }

  span:not(.error) {
    font-size: i.$font-size-md;
    color: var(--text-muted);
    transition: i.transition(color);
  }

  div {
    @include i.flex(row, start, center);
    width: 100%;
    padding: 0 i.$padding-2xs;
    border: i.$base-border transparent;
    border-radius: i.$border-radius-lg;
    background-color: var(--bg-light);
    transition: i.transition(border-color);

    &:focus-within {
      border-color: var(--primary);
    }

    input {
      border: none;
      background-color: transparent;

      &:disabled + button {
        color: var(--text-muted);
      }
    }

    button {
      cursor: pointer;
      font-size: i.$font-size-md;
      color: var(--text-muted);
      transition: i.transition(color);

      &:hover, &:focus {
        color: var(--text);
      }
    }
  }

  input {
    width: 100%;
    padding: i.$padding-2xs;
    font-size: i.$font-size-sm;
    border: i.$base-border var(--bg-light);
    border-radius: i.$border-radius-lg;
    transition: i.transition(border-color);

    &:disabled {
      @include i.font-height(i.$font-size-sm);
      cursor: not-allowed;
      background-color: var(--bg-light);
      color: var(--text-muted);
    }

    &:focus {
      border-color: var(--primary);
    }

    &[type="checkbox"] {
      position: relative;
      margin-right: i.$margin-xs;
      width: 1.2em;
      height: 1.2em;
      cursor: pointer;
      border: i.$base-border var(--border-muted);
      border-radius: i.$border-radius-sm;
      background: var(--bg-light);
      transition: i.transition(background), i.transition(border-color);
      appearance: none;


      &:disabled {
        cursor: not-allowed;
        background-color: var(--bg-light);
        border-color: var(--border-muted);

        &:checked {
          background: var(--bg-light);
          border-color: var(--border-muted);

          &::after {
            border-color: var(--primary);
          }
        }
      }

      &:checked {
        background: var(--primary);
        border-color: var(--primary);

        &:focus {
          background: var(--secondary);
          border-color: var(--secondary);
        }

        &::after {
          position: absolute;
          width: 0.3em;
          height: 0.6em;
          border: solid var(--bg);
          transform: rotate(45deg);
          content: '';
          left: 0.3em;
          top: 0.05em;
          border-width: 0 0.2em 0.2em 0;
          pointer-events: none;
        }
      }

      &:focus {
        border-color: var(--primary);
      }
    }
  }
}

button:not(.show-password) {
  @include i.flex($justify: center, $align: center, $gap: i.$margin-2xs);
  width: 100%;
  padding: i.$padding-2xs i.$padding-md;
  cursor: pointer;
  font-size: i.$font-size-md;
  font-weight: 500;
  border-radius: i.$border-radius-lg;
  background-color: var(--primary);
  color: var(--bg);
  transition: i.transition(background-color, i.$duration-md), i.transition(outline-color);
  outline: none;

  .logging-in, &:disabled {
    cursor: not-allowed;
  }

  &:disabled:not(.logging-in) {
    @include i.font-height(i.$font-size-sm);
    background-color: var(--bg-light);
    color: var(--text-muted);
    border-color: var(--border-muted);
  }

  &:focus {
    outline: 2px solid var(--highlight);
  }

  &:not(:disabled):hover, &:not(:disabled):focus {
    background-color: var(--secondary);
  }
}

.spinner {
  position: relative;
  width: i.$font-size-md;
  height: i.$font-size-md;
  display: inline-block;
  animation: rotate 1s linear infinite;
}

.spinner::before {
  position: absolute;
  border: 2px solid var(--bg-light);
  border-radius: i.$border-radius-full;
  content: '';
  inset: 0;
  animation: prixClipFix 2s linear infinite alternate;
}

@keyframes rotate {
  100% {
    transform: rotate(360deg)
  }
}

@keyframes prixClipFix {
  0% {
    clip-path: polygon(50% 50%, 0 0, 0 0, 0 0, 0 0, 0 0)
  }
  25% {
    clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 0, 100% 0, 100% 0)
  }
  50% {
    clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 100%, 100% 100%, 100% 100%)
  }
  75% {
    clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 100%, 0 100%, 0 100%)
  }
  100% {
    clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 100%, 0 100%, 0 0)
  }
}

@keyframes spin {
  to {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}
